<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code the World</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-25T15:20:26.617Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sichao Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Conversions between infix, prefix and postfix expressions</title>
    <link href="http://yoursite.com/2019/10/25/Conversions-between-infix-prefix-and-postfix-expressions/"/>
    <id>http://yoursite.com/2019/10/25/Conversions-between-infix-prefix-and-postfix-expressions/</id>
    <published>2019-10-25T15:08:59.000Z</published>
    <updated>2019-10-25T15:20:26.617Z</updated>
    
    <content type="html"><![CDATA[<p>I met a problem of converting the prefix expression to postfix in an online assessment, so I code all these conversions just for practice.</p><p>The following code could conversion every pair of these expressions and compute the value of postfix expression, which supports + - * / and ^(power) operations. You could start with conversions of infix, then you will understand the stack deeply and implement the prefix to postfix function yourself easily.</p><p>some test cases also included in the code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">expressionTransformer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.signs=&#123;<span class="string">'('</span>:<span class="number">1</span>,<span class="string">'+'</span>:<span class="number">2</span>,<span class="string">'-'</span>:<span class="number">2</span>,<span class="string">'*'</span>:<span class="number">3</span>,<span class="string">'/'</span>:<span class="number">3</span>,<span class="string">'^'</span>:<span class="number">4</span>, <span class="string">'**'</span>:<span class="number">4</span>&#125;</span><br><span class="line">        self.chars=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span></span><br><span class="line">        self.nums=<span class="string">"0123456789"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inToPre</span><span class="params">(self,infix)</span>:</span></span><br><span class="line">        operators, operands = [], []</span><br><span class="line">        tokenlist = infix.split()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> token <span class="keyword">in</span> tokenlist:</span><br><span class="line">            <span class="keyword">if</span> token <span class="keyword">in</span> self.nums <span class="keyword">or</span> token <span class="keyword">in</span> self.chars:</span><br><span class="line">                operands.append(token)</span><br><span class="line">            <span class="keyword">elif</span> token == <span class="string">'('</span>:</span><br><span class="line">                operators.append(token)</span><br><span class="line">            <span class="keyword">elif</span> token == <span class="string">')'</span>:</span><br><span class="line">                <span class="keyword">while</span> operators[<span class="number">-1</span>] != <span class="string">'('</span>:</span><br><span class="line">                    op2 = operands.pop()</span><br><span class="line">                    op1 = operands.pop()</span><br><span class="line">                    op = operators.pop()</span><br><span class="line">                    operands.append(op+<span class="string">' '</span>+op1+<span class="string">' '</span>+op2)</span><br><span class="line">                operators.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> len(operators) != <span class="number">0</span> <span class="keyword">and</span> self.signs[operators[<span class="number">-1</span>]] &gt;= self.signs[token]:</span><br><span class="line">                    op2 = operands.pop()</span><br><span class="line">                    op1 = operands.pop()</span><br><span class="line">                    op = operators.pop()</span><br><span class="line">                    operands.append(op+<span class="string">' '</span>+op1+<span class="string">' '</span>+op2)</span><br><span class="line">                operators.append(token)</span><br><span class="line">        <span class="keyword">while</span> len(operators) != <span class="number">0</span>:</span><br><span class="line">            op2 = operands.pop()</span><br><span class="line">            op1 = operands.pop()</span><br><span class="line">            op = operators.pop()</span><br><span class="line">            operands.append(op+<span class="string">' '</span>+op1+<span class="string">' '</span>+op2)</span><br><span class="line">        <span class="keyword">return</span> operands[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inToPos</span><span class="params">(self,infix)</span>:</span></span><br><span class="line">        stack, postfix = [], []</span><br><span class="line">        tokenlist = infix.split()</span><br><span class="line">        <span class="keyword">for</span> token <span class="keyword">in</span> tokenlist:</span><br><span class="line">            <span class="keyword">if</span> token <span class="keyword">in</span> self.chars <span class="keyword">or</span> token <span class="keyword">in</span> self.nums:</span><br><span class="line">                postfix.append(token)</span><br><span class="line">            <span class="keyword">elif</span> token == <span class="string">'('</span>:</span><br><span class="line">                stack.append(token)</span><br><span class="line">            <span class="keyword">elif</span> token == <span class="string">')'</span>:</span><br><span class="line">                <span class="keyword">while</span> stack[<span class="number">-1</span>] != <span class="string">'('</span>:</span><br><span class="line">                    postfix.append(stack.pop())</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> len(stack) != <span class="number">0</span> <span class="keyword">and</span> self.signs[stack[<span class="number">-1</span>]] &gt;= self.signs[token]:</span><br><span class="line">                    postfix.append(stack.pop())</span><br><span class="line">                stack.append(token)</span><br><span class="line">        <span class="keyword">while</span> len(stack) != <span class="number">0</span>:</span><br><span class="line">            postfix.append(stack.pop())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(postfix)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preToIn</span><span class="params">(self,prefix)</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line">        tokenlist = prefix.split()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tokenlist)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            token = tokenlist[i]</span><br><span class="line">            <span class="keyword">if</span> token <span class="keyword">not</span> <span class="keyword">in</span> self.signs:</span><br><span class="line">                stack.append(token)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                op1 = stack.pop()</span><br><span class="line">                op2 = stack.pop()</span><br><span class="line">                newOp = op1+<span class="string">' '</span>+token+<span class="string">' '</span>+op2</span><br><span class="line">                <span class="keyword">if</span> self.signs[token] == <span class="number">2</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">                    newOp = <span class="string">'( '</span> + newOp + <span class="string">' )'</span></span><br><span class="line">                stack.append(newOp)</span><br><span class="line">        <span class="keyword">return</span> stack[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preToPos</span><span class="params">(self,prefix)</span>:</span></span><br><span class="line">        stack, tokenlist = [], prefix.split()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> token <span class="keyword">in</span> reversed(tokenlist):</span><br><span class="line">            <span class="keyword">if</span> token <span class="keyword">not</span> <span class="keyword">in</span> self.signs:</span><br><span class="line">                stack.append(token)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                op1 = stack.pop()</span><br><span class="line">                op2 = stack.pop()</span><br><span class="line">                stack.append(op1+<span class="string">' '</span>+op2+<span class="string">' '</span>+token)</span><br><span class="line">        print(stack[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> stack[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">posToPre</span><span class="params">(self,postfix)</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line">        tokenlist = postfix.split()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> token <span class="keyword">in</span> tokenlist:</span><br><span class="line">            <span class="keyword">if</span> token <span class="keyword">not</span> <span class="keyword">in</span> self.signs:</span><br><span class="line">                stack.append(token)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                op2 = stack.pop()</span><br><span class="line">                op1 = stack.pop()</span><br><span class="line">                stack.append(token+<span class="string">' '</span>+op1+<span class="string">' '</span>+op2)</span><br><span class="line">        <span class="keyword">return</span> stack[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">posToIn</span><span class="params">(self,postfix)</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line">        tokenlist = postfix.split()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> token <span class="keyword">in</span> tokenlist:</span><br><span class="line">            <span class="keyword">if</span> token <span class="keyword">not</span> <span class="keyword">in</span> self.signs:</span><br><span class="line">                stack.append(token)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                op2 = stack.pop()</span><br><span class="line">                op1 = stack.pop()</span><br><span class="line">                newOp = op1+<span class="string">' '</span>+token+<span class="string">' '</span>+op2</span><br><span class="line">                <span class="keyword">if</span> self.signs[token] == <span class="number">2</span> <span class="keyword">and</span> len(stack) != <span class="number">0</span>:</span><br><span class="line">                    newOp = <span class="string">'( '</span>+newOp+<span class="string">' )'</span> </span><br><span class="line">                stack.append(newOp)</span><br><span class="line">        <span class="keyword">return</span> stack[<span class="number">0</span>]</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doMath</span><span class="params">(self,op1,op2,op)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">'+'</span>:</span><br><span class="line">            <span class="keyword">return</span> op1 + op2</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'-'</span>:</span><br><span class="line">            <span class="keyword">return</span> op1 - op2</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'*'</span>:</span><br><span class="line">            <span class="keyword">return</span> op1 * op2</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'/'</span>:</span><br><span class="line">            <span class="keyword">return</span> op1 / op2</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'**'</span> <span class="keyword">or</span> op == <span class="string">'^'</span>:</span><br><span class="line">            <span class="keyword">return</span> op1 ** op2</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">computePos</span><span class="params">(self,postfix)</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line">        tokenlist = postfix.split()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> token <span class="keyword">in</span> tokenlist:</span><br><span class="line">            <span class="keyword">if</span> token <span class="keyword">in</span> self.nums:</span><br><span class="line">                stack.append(int(token))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                op2 = stack.pop()</span><br><span class="line">                op1 = stack.pop()</span><br><span class="line">                stack.append(self.doMath(op1,op2,token))</span><br><span class="line">        <span class="keyword">return</span> stack[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#testing</span></span><br><span class="line"><span class="keyword">if</span> __name__  == <span class="string">"__main__"</span>:</span><br><span class="line">    expTrans = expressionTransformer()</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(testcase)</span>:</span></span><br><span class="line">        print(<span class="string">"testing case:"</span>,testcase)</span><br><span class="line">        <span class="keyword">assert</span> testcase[<span class="number">0</span>] == expTrans.inToPre(testcase[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">assert</span> testcase[<span class="number">0</span>] == expTrans.posToPre(testcase[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">assert</span> testcase[<span class="number">1</span>] == expTrans.preToIn(testcase[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">assert</span> testcase[<span class="number">1</span>] == expTrans.posToIn(testcase[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">assert</span> testcase[<span class="number">2</span>] == expTrans.preToPos(testcase[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">assert</span> testcase[<span class="number">2</span>] == expTrans.inToPos(testcase[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">assert</span> testcase[<span class="number">3</span>] == expTrans.computePos(testcase[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    test_cases = [</span><br><span class="line">        [<span class="string">'+ * 1 3 / 2 4'</span>,<span class="string">'1 * 3 + 2 / 4'</span>,<span class="string">'1 3 * 2 4 / +'</span>,<span class="number">3.50</span>],</span><br><span class="line">        [<span class="string">'/ * 3 + 4 1 5'</span>,<span class="string">'3 * ( 4 + 1 ) / 5'</span>,<span class="string">'3 4 1 + * 5 /'</span>,<span class="number">3</span>],</span><br><span class="line">        [<span class="string">'* 2 + 4 / 6 3'</span>,<span class="string">'2 * ( 4 + 6 / 3 )'</span>,<span class="string">'2 4 6 3 / + *'</span>,<span class="number">12</span>],</span><br><span class="line">        [<span class="string">'* ** 5 2 ** + 4 1 + 1 1'</span>,<span class="string">'5 ** 2 * ( 4 + 1 ) ** ( 1 + 1 )'</span>,<span class="string">'5 2 ** 4 1 + 1 1 + ** *'</span>,<span class="number">625</span>]</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> test_case <span class="keyword">in</span> test_cases:</span><br><span class="line">        cnt += test(test_case)</span><br><span class="line">    print(<span class="string">"passed &#123;&#125;/&#123;&#125; cases!"</span>.format(cnt,len(test_cases)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I met a problem of converting the prefix expression to postfix in an online assessment, so I code all these conversions just for practice
      
    
    </summary>
    
    
      <category term="Online Assessment" scheme="http://yoursite.com/tags/Online-Assessment/"/>
    
  </entry>
  
  <entry>
    <title>Process 60GB XML data in Java</title>
    <link href="http://yoursite.com/2019/04/02/Process-60GB-XML-data-in-Java/"/>
    <id>http://yoursite.com/2019/04/02/Process-60GB-XML-data-in-Java/</id>
    <published>2019-04-03T03:24:24.000Z</published>
    <updated>2019-04-03T04:19:36.774Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h4><p>In my recent project, I need to preprocess and retrieval the questions tagged as <code>python</code> as well as their corresponding answers from the dump files of Stack Overflow (.xml format). For some reason, I need to store the data both into another xml file and database.</p><p>The data I want comes from the Posts.xml file, which is larger than 60GB, how to process it using my PC become a big issue, in other words, how to read and write are the two keys of this task.</p><h4 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h4><ul><li><p><strong>Read file and Write to XML</strong></p><p>There are two different ways to process the xml file in Java, DOM and Event Driven. In this case, the DOM solution is not feasible since it requires to load all the file to build DOM tree. Obviously, event oriented way could be put into use perfectly, since it allow me to batch process the data. After comparing <a href="http://tutorials.jenkov.com/java-xml/sax-vs-stax.html" target="_blank" rel="noopener">StAX vs SAX</a>, I choose StAX for this task.</p><a id="more"></a><ul><li><strong>Implement</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">staxWriter</span><span class="params">(String language,String path)</span> <span class="keyword">throws</span> XMLStreamException, FileNotFoundException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Begin init"</span>);</span><br><span class="line">        Long begin = System.currentTimeMillis(),start = begin;</span><br><span class="line">        Qids = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        XMLInputFactory inputFactory = XMLInputFactory.newInstance();</span><br><span class="line">        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();   inputFactory.setProperty(<span class="string">"http://www.oracle.com/xml/jaxp/properties/getEntityCountInfo"</span>, <span class="string">"yes"</span>);        inputFactory.setProperty(<span class="string">"http://www.oracle.com/xml/jaxp/properties/totalEntitySizeLimit"</span>, Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        XMLStreamReader questReader = inputFactory.createXMLStreamReader(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(path)), <span class="string">"utf-8"</span>);</span><br><span class="line">        XMLStreamWriter writer = outputFactory.createXMLStreamWriter(<span class="keyword">new</span> FileOutputStream(Path.langPosts+language+<span class="string">"Posts.xml"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line">  </span><br><span class="line">        System.out.println(<span class="string">"Init done, process begin"</span>);</span><br><span class="line">        <span class="keyword">int</span> rowCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//Q Id CreationDate Title Body</span></span><br><span class="line">        <span class="comment">//A Id ParentId CreationDate Body</span></span><br><span class="line">        String Id, CreationDate,ParentId, Title, Body, Tags, postTypeId;</span><br><span class="line"></span><br><span class="line">        writer.writeStartDocument(<span class="string">"UTF-8"</span>, <span class="string">"1.0"</span>);</span><br><span class="line">        writer.writeCharacters(<span class="string">"\n"</span>);</span><br><span class="line">        writer.writeStartElement(<span class="string">"posts"</span>);</span><br><span class="line">        writer.writeCharacters(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">while</span> (questReader.hasNext()) &#123;</span><br><span class="line">            questReader.next();</span><br><span class="line">            <span class="keyword">if</span> (questReader.getEventType() == XMLStreamReader.START_ELEMENT) &#123;</span><br><span class="line">                <span class="keyword">if</span> (questReader.getLocalName().equals(<span class="string">"row"</span>)) &#123;</span><br><span class="line">                    postTypeId = questReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"PostTypeId"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"1"</span>.equals(postTypeId))&#123;</span><br><span class="line">                        Tags = questReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"Tags"</span>);</span><br><span class="line">                        <span class="keyword">if</span> (Tags != <span class="keyword">null</span> &amp;&amp; Tags.contains(language))&#123;</span><br><span class="line">                            Id = questReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"Id"</span>);</span><br><span class="line">                            CreationDate = questReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"CreationDate"</span>);</span><br><span class="line">                            Title = questReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"Title"</span>).toLowerCase();</span><br><span class="line">                            Body = questReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"Body"</span>).toLowerCase().replace(<span class="string">"\n"</span>,<span class="string">"\\n"</span>).replace(<span class="string">"\r\n"</span>,<span class="string">"\\n"</span>);</span><br><span class="line">                            Qids.add(Id); rowCount++;</span><br><span class="line">                            writer.writeCharacters(<span class="string">"\t"</span>);</span><br><span class="line">                            writer.writeStartElement(<span class="string">"question"</span>);</span><br><span class="line">                            writer.writeAttribute(<span class="string">"Id"</span>,Id);</span><br><span class="line">                            writer.writeAttribute(<span class="string">"Date"</span>,CreationDate);</span><br><span class="line">                            writer.writeAttribute(<span class="string">"Title"</span>,Title);</span><br><span class="line">                            writer.writeAttribute(<span class="string">"Tags"</span>,Tags);</span><br><span class="line">                            writer.writeAttribute(<span class="string">"Body"</span>,Body);</span><br><span class="line">                            writer.writeEndElement();</span><br><span class="line">                            writer.writeCharacters(<span class="string">"\n"</span>);</span><br><span class="line">                            <span class="keyword">if</span> (rowCount % commitCount == <span class="number">0</span>)&#123;</span><br><span class="line">                                <span class="comment">//write to file</span></span><br><span class="line">                                writer.flush();</span><br><span class="line">                                <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">                                System.out.println(<span class="string">"Write "</span> + rowCount + <span class="string">" questions √ using "</span> +  (now - begin) / <span class="number">60000.0</span> + <span class="string">" mins"</span>);</span><br><span class="line">                                begin = now;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        writer.flush();</span><br><span class="line">        <span class="keyword">long</span> timeQ = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Write all "</span> + rowCount + <span class="string">" questions √, using "</span> +  (timeQ - start) / <span class="number">60000.0</span> + <span class="string">" mins"</span>);</span><br><span class="line">        rowCount = <span class="number">0</span>;</span><br><span class="line">        XMLStreamReader answerReader = inputFactory.createXMLStreamReader(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(path)), <span class="string">"utf-8"</span>);</span><br><span class="line">        begin = timeQ;</span><br><span class="line">        <span class="keyword">while</span> (answerReader.hasNext()) &#123;</span><br><span class="line">            answerReader.next();</span><br><span class="line">            <span class="keyword">if</span> (answerReader.getEventType() == XMLStreamReader.START_ELEMENT) &#123;</span><br><span class="line">                <span class="keyword">if</span> (answerReader.getLocalName().equals(<span class="string">"row"</span>)) &#123;</span><br><span class="line">                    postTypeId = answerReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"PostTypeId"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"2"</span>.equals(postTypeId))&#123;</span><br><span class="line">                        ParentId = answerReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"ParentId"</span>);</span><br><span class="line">                        <span class="keyword">if</span> (Qids.contains(ParentId))&#123;</span><br><span class="line">                            Id = answerReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"Id"</span>);</span><br><span class="line">                            CreationDate = answerReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"CreationDate"</span>);</span><br><span class="line">                            Body = answerReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"Body"</span>).toLowerCase().replace(<span class="string">"\n"</span>,<span class="string">""</span>);</span><br><span class="line">                            rowCount++;</span><br><span class="line">                            writer.writeCharacters(<span class="string">"\t"</span>);</span><br><span class="line">                            writer.writeStartElement(<span class="string">"answer"</span>);</span><br><span class="line">                            writer.writeAttribute(<span class="string">"Id"</span>,Id);</span><br><span class="line">                            writer.writeAttribute(<span class="string">"ParentId"</span>,ParentId);</span><br><span class="line">                            writer.writeAttribute(<span class="string">"Date"</span>,CreationDate);</span><br><span class="line">                            writer.writeAttribute(<span class="string">"Body"</span>,Body);</span><br><span class="line">                            writer.writeEndElement();</span><br><span class="line">                            writer.writeCharacters(<span class="string">"\n"</span>);</span><br><span class="line">                            <span class="keyword">if</span> (rowCount % commitCount == <span class="number">0</span>)&#123;</span><br><span class="line">                                <span class="comment">//write</span></span><br><span class="line">                                writer.flush();</span><br><span class="line">                                <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">                                System.out.println(<span class="string">"Write "</span> + rowCount + <span class="string">" answers √ using "</span> +  (now - begin) / <span class="number">60000.0</span> + <span class="string">" mins"</span>);</span><br><span class="line">                                begin = now;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        writer.writeEndElement();</span><br><span class="line">        writer.writeEndDocument();</span><br><span class="line">        writer.flush();</span><br><span class="line">        System.out.println(<span class="string">"Write all "</span> + rowCount + <span class="string">" answers √ using "</span> + (System.currentTimeMillis() - timeQ) / <span class="number">60000.0</span> + <span class="string">" mins"</span>);</span><br><span class="line"></span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>It took me 4hrs to finish the processing, retrieval about 4G data from the original file (60G), which is an acceptable performance.</p></li><li><p><strong>Read file and Write to Database</strong></p><p>With the previous experience and result, this part become easier, I just process the output file of above code and store them into database.</p><ul><li><strong>Implement</strong>  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xmlToDB</span><span class="params">(String path,String language)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//batch processing using StAX and store every row into database</span></span><br><span class="line">            <span class="comment">// timer starts</span></span><br><span class="line">            Long begin = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            String questionSql = <span class="string">"INSERT INTO questions VALUES (?,?,?,?)"</span>;</span><br><span class="line">            String answerSql = <span class="string">"INSERT INTO answers VALUES (?,?,?,?)"</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">this</span>.connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            pst = connection.prepareStatement(questionSql);</span><br><span class="line"></span><br><span class="line">            XMLInputFactory inputFactory = XMLInputFactory.newInstance();</span><br><span class="line">            inputFactory.setProperty(<span class="string">"http://www.oracle.com/xml/jaxp/properties/getEntityCountInfo"</span>, <span class="string">"yes"</span>);</span><br><span class="line">            inputFactory.setProperty(<span class="string">"http://www.oracle.com/xml/jaxp/properties/totalEntitySizeLimit"</span>, Integer.MAX_VALUE);</span><br><span class="line">            XMLStreamReader streamReader = inputFactory.createXMLStreamReader(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(path+language+<span class="string">"Posts.xml"</span>)), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> rowCount = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//Q Id CreationDate Title Body</span></span><br><span class="line">            <span class="comment">//A Id ParentId CreationDate Body</span></span><br><span class="line">            String Id, ParentId, Title, Body, date;</span><br><span class="line">            BatchReplacer replacer = <span class="keyword">new</span> BatchReplacer();</span><br><span class="line">            <span class="keyword">while</span> (streamReader.hasNext()) &#123;</span><br><span class="line">                streamReader.next();</span><br><span class="line">                <span class="keyword">if</span> (streamReader.getEventType() == XMLStreamReader.START_ELEMENT) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (streamReader.getLocalName().equals(<span class="string">"posts"</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                    Id = streamReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"Id"</span>);</span><br><span class="line">                    date = streamReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"Date"</span>);</span><br><span class="line">                    Body = streamReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"Body"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (streamReader.getLocalName().equals(<span class="string">"question"</span>)) &#123;</span><br><span class="line">                        Title = replacer.replace(streamReader.getAttributeValue(<span class="keyword">null</span>, <span class="string">"Title"</span>));</span><br><span class="line">                        pst.setInt(<span class="number">1</span>,Integer.valueOf(Id));</span><br><span class="line">                        pst.setString(<span class="number">2</span>,date);</span><br><span class="line">                        pst.setString(<span class="number">3</span>,Title);</span><br><span class="line">                        pst.setString(<span class="number">4</span>,Body);</span><br><span class="line">                        pst.addBatch();</span><br><span class="line">                        rowCount += <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span> (rowCount % commitCount == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                pst.executeBatch();</span><br><span class="line">                                connection.commit();</span><br><span class="line">                                System.out.println(<span class="string">"Commit "</span> + rowCount + <span class="string">" questions √"</span>);</span><br><span class="line">                            &#125;<span class="keyword">catch</span> (SQLException sq)&#123;</span><br><span class="line">                                sq.printStackTrace();</span><br><span class="line">                                System.out.println(<span class="string">"Error in question sql at batch"</span> + rowCount / commitCount );</span><br><span class="line">                                pst.clearBatch();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                pst.executeBatch();</span><br><span class="line">                                connection.commit();</span><br><span class="line">                            &#125;<span class="keyword">catch</span> (SQLException sq)&#123;</span><br><span class="line">                                sq.printStackTrace();</span><br><span class="line">                                System.out.println(<span class="string">"Error in question sql at last batch"</span>);</span><br><span class="line">                                pst.clearBatch();</span><br><span class="line">                            &#125;</span><br><span class="line">                            pst = connection.prepareStatement(answerSql);</span><br><span class="line">                            flag = <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        ParentId = streamReader.getAttributeValue(<span class="keyword">null</span>,<span class="string">"ParentId"</span>);</span><br><span class="line">                        pst.setInt(<span class="number">1</span>,Integer.valueOf(Id));</span><br><span class="line">                        pst.setInt(<span class="number">2</span>,Integer.valueOf(ParentId));</span><br><span class="line">                        pst.setString(<span class="number">3</span>, date);</span><br><span class="line">                        pst.setString(<span class="number">4</span>,Body);</span><br><span class="line">                        pst.addBatch();</span><br><span class="line">                        rowCount += <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span> (rowCount % commitCount == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                pst.executeBatch();</span><br><span class="line">                                connection.commit();</span><br><span class="line">                                System.out.println(<span class="string">"Commit "</span> + rowCount + <span class="string">" answers √"</span>);</span><br><span class="line">                            &#125;<span class="keyword">catch</span> (SQLException sq)&#123;</span><br><span class="line">                                sq.printStackTrace();</span><br><span class="line">                                System.out.println(<span class="string">"Error in answer sql at batch"</span> + rowCount / commitCount );</span><br><span class="line">                                pst.clearBatch();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pst.executeBatch();</span><br><span class="line">                connection.commit();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException sq)&#123;</span><br><span class="line">                sq.printStackTrace();</span><br><span class="line">                System.out.println(<span class="string">"Error in answer sql at last batch"</span>);</span><br><span class="line">                pst.clearBatch();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"Process all "</span> + rowCount + <span class="string">" records √"</span>);</span><br><span class="line">            pst.close();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Cost : "</span> + (System.currentTimeMillis() - begin) / <span class="number">60000</span> + <span class="string">" mins"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>The reason of using PreparedStatement is that the Body contains lots of special characters such as <code>\n,\r,&#39;,&quot;</code> , which required to be escape, if simply using concat way to form the String into SQL statement, there will be exception. While the PreparedStatement could handle this issue.</p><p>It took 13 mins to complete the storage, this performance was satisfactory.</p></li></ul><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><ul><li>Batch processing is a good way to save the memory and improve the efficency.</li><li>Catch the exception is better than throws them, it helps you quickly find and fix bugs.</li><li>For the field type (store string) in the mysql database, there are serval types for different string lengths, such as <code>varchar</code>, <code>text</code>, <code>mediumtext</code>, and <code>long text</code>.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Challenges&quot;&gt;&lt;a href=&quot;#Challenges&quot; class=&quot;headerlink&quot; title=&quot;Challenges&quot;&gt;&lt;/a&gt;Challenges&lt;/h4&gt;&lt;p&gt;In my recent project, I need to preprocess and retrieval the questions tagged as &lt;code&gt;python&lt;/code&gt; as well as their corresponding answers from the dump files of Stack Overflow (.xml format). For some reason, I need to store the data both into another xml file and database.&lt;/p&gt;
&lt;p&gt;The data I want comes from the Posts.xml file, which is larger than 60GB, how to process it using my PC become a big issue, in other words, how to read and write are the two keys of this task.&lt;/p&gt;
&lt;h4 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions&quot;&gt;&lt;/a&gt;Solutions&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read file and Write to XML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two different ways to process the xml file in Java, DOM and Event Driven. In this case, the DOM solution is not feasible since it requires to load all the file to build DOM tree. Obviously, event oriented way could be put into use perfectly, since it allow me to batch process the data. After comparing &lt;a href=&quot;http://tutorials.jenkov.com/java-xml/sax-vs-stax.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;StAX vs SAX&lt;/a&gt;, I choose StAX for this task.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Data processing" scheme="http://yoursite.com/tags/Data-processing/"/>
    
  </entry>
  
  <entry>
    <title>Bytedance电面面经</title>
    <link href="http://yoursite.com/2019/02/28/Bytedance%E7%94%B5%E9%9D%A2%E9%9D%A2%E7%BB%8F/"/>
    <id>http://yoursite.com/2019/02/28/Bytedance电面面经/</id>
    <published>2019-02-28T18:43:41.000Z</published>
    <updated>2019-04-03T04:25:42.676Z</updated>
    
    <content type="html"><![CDATA[<p>这次电面是本人第一次求职面试，面试过程中也有一些问题答不上来或需要提示才能答出，但整体答题较为流畅，运气尚佳通过了此次面试。感谢前辈们分享的面经，也将此次面试经历记录并分享。虽然答案只是个人粗浅的理解，希望能对正在求职的小伙伴有帮助，也欢迎各位指出我的不足～</p><a id="more"></a><h4 id="Q1-简述进程线程"><a href="#Q1-简述进程线程" class="headerlink" title="Q1:简述进程线程"></a>Q1:简述进程线程</h4><p>A:进程是系统分配资源的独立单位,线程是系统调度的基本单位</p><p>追问: 线程是否有独立内存？A:有，线程共享进程的内存空间，通过互斥锁独立访问</p><h4 id="Q2-了解乐观锁悲观锁么"><a href="#Q2-了解乐观锁悲观锁么" class="headerlink" title="Q2:了解乐观锁悲观锁么"></a>Q2:了解乐观锁悲观锁么</h4><h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p>该机制假设每次拿数据的时候都认为别人不会修改，因此不加锁，但在更新时会去判断在此期间别人是否有更新这个数据，使用版本号机制和CAS算法实现。<strong>适用于读操作多的应用，提高吞吐量。</strong></p><h5 id="CAS算法-并未提问该算法，仅作为个人补充"><a href="#CAS算法-并未提问该算法，仅作为个人补充" class="headerlink" title="CAS算法(并未提问该算法，仅作为个人补充)"></a>CAS算法(并未提问该算法，仅作为个人补充)</h5><p>C(compare) A(and) S(swap). 无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization。</p><p>该算法涉及到三个操作数</p><ul><li>需要读写的内存值 V</li><li>进行比较的值 A</li><li>拟写入的新值 B</li></ul><p>算法主要思想如下：“我认为V的值应该为A，如果是，那么将V的值更新为B，否则不修改并告诉V的值实际为多少”。当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作。在多个线程尝试修改同一内存时，只有一个线程可以修改成功，失败的线程不会被挂起，可以再次尝试</p><h5 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h5><p>该机制假设每次拿到数据的时都认为别人会修改，所以每次拿到数据都会加锁。传统关系数据中的读锁写锁机就是这种机制</p><h4 id="Q3-java里的同步实现方法"><a href="#Q3-java里的同步实现方法" class="headerlink" title="Q3:java里的同步实现方法"></a>Q3:java里的同步实现方法</h4><p>该部分并未完整答出，给出的答案是整理自网络，若有错误请指正。</p><h5 id="synchronized-悲观锁"><a href="#synchronized-悲观锁" class="headerlink" title="synchronized(悲观锁)"></a>synchronized(悲观锁)</h5><p>该关键字调用java对象的内置锁，进而保护整个方法/对象 —&gt;<strong>可见java的方法也是对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//usage1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//usage2</span></span><br><span class="line"><span class="keyword">synchronized</span>(object)&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h5><p>a.volatile关键字为域变量的访问提供了一种免锁机制，<br>b.使用volatile修饰域相当于告诉虚拟机该域可能会被其他线程更新，<br>c.因此每次使用该域就要重新计算，而不是使用寄存器中的值<br>d.volatile不会提供任何原子操作，它也不能用来修饰final类型的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修饰需要同步的变量，该变量不能用final修饰</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> account;</span><br></pre></td></tr></table></figure><h5 id="ReentrantLock-悲观锁"><a href="#ReentrantLock-悲观锁" class="headerlink" title="ReentrantLock(悲观锁)"></a>ReentrantLock(悲观锁)</h5><p><code>Java.util.concurrent</code>包中的ReentrantLock类是可重入，互斥，实现了Lock接口的锁</p><h5 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h5><p>使用该类管理变量，则每个使用该变量的线程都获得该变量的副本，副本直接互相独立，可在线程中随意修改互不影响。</p><h4 id="算法-amp-数据结构"><a href="#算法-amp-数据结构" class="headerlink" title="算法&amp;数据结构"></a>算法&amp;数据结构</h4><p>数据结构考题较为基础，因为是电面没有写码而是口述思路。后续补充相应代码</p><h4 id="Q4-非递归的先序遍历2叉树"><a href="#Q4-非递归的先序遍历2叉树" class="headerlink" title="Q4:非递归的先序遍历2叉树"></a>Q4:非递归的先序遍历2叉树</h4><p>先序：根，左子节点，右子节点</p><p>维护一个栈，将根结点压入栈。<br>进入循环，判断栈是否为空，非空则输出栈顶元素并出栈<br>判断该节点是否有子节点，按右子节点，左子节点顺序入栈。<br>循环次步骤</p><h4 id="Q5-树的层次遍历"><a href="#Q5-树的层次遍历" class="headerlink" title="Q5:树的层次遍历"></a>Q5:树的层次遍历</h4><p>维护一个队列，将根结点入队<br>进入循环，判断队是否为空，非空则输出队首元素并出队<br>判断该节点是否有子节点，若有，则依次(左，右)入队<br>循环之</p><h4 id="Q6-栈实现队列的功能"><a href="#Q6-栈实现队列的功能" class="headerlink" title="Q6:栈实现队列的功能"></a>Q6:栈实现队列的功能</h4><p>维护两个栈，S1负责接收入队元素，S2负责完成出队操作</p><p>push:直接压入S1<br>poll: 判断S2是否为空，非空则将S2栈顶元素出栈作为输出，否则将S1中元素依次出栈压入S2，直到S1中只含一个元素，将其出栈作为输出</p><h4 id="Q7-o-1-复杂度算栈内最大值"><a href="#Q7-o-1-复杂度算栈内最大值" class="headerlink" title="Q7:o(1)复杂度算栈内最大值"></a>Q7:o(1)复杂度算栈内最大值</h4><p>该题只要求O1时间复杂度，空间复杂度方面没有限制</p><p>同样维护两个栈，S作为主栈存储元素，MaxS记录当前S中最大值</p><p>Push:判断S是否为空，若为空，则将该元素X入栈S和MaxS，否则比较X与MaxS.head()，若X&gt;MaxS.head(),则将X压入两个栈，否则X入栈S，MaxS再次压入其栈顶元素</p><p>Pop: S弹出元素后MaxS也出栈栈顶元素</p><p>Max(S): 即MaxS.head() </p><h4 id="Q8-amp-9-简述快排思想，递归的缺点"><a href="#Q8-amp-9-简述快排思想，递归的缺点" class="headerlink" title="Q8&amp;9:简述快排思想，递归的缺点"></a>Q8&amp;9:简述快排思想，递归的缺点</h4><p>基础题，不赘述</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次电面是本人第一次求职面试，面试过程中也有一些问题答不上来或需要提示才能答出，但整体答题较为流畅，运气尚佳通过了此次面试。感谢前辈们分享的面经，也将此次面试经历记录并分享。虽然答案只是个人粗浅的理解，希望能对正在求职的小伙伴有帮助，也欢迎各位指出我的不足～&lt;/p&gt;
    
    </summary>
    
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Tutorial for Hadoop(1) - single node</title>
    <link href="http://yoursite.com/2019/02/06/Tutorial%20for%20Hadoop(1)%20single%20node/"/>
    <id>http://yoursite.com/2019/02/06/Tutorial for Hadoop(1) single node/</id>
    <published>2019-02-07T00:29:08.000Z</published>
    <updated>2019-04-03T04:19:07.315Z</updated>
    
    <content type="html"><![CDATA[<p>This tutorial is to build a single node Hadoop platform on a ubuntu vm.</p><a id="more"></a><h2 id="1-Install-Java-Oracle-JDK8"><a href="#1-Install-Java-Oracle-JDK8" class="headerlink" title="1.Install Java(Oracle JDK8)"></a>1.Install Java(Oracle JDK8)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line"><span class="meta">$</span> sudo apt-get update</span><br><span class="line"><span class="meta">$</span> sudo apt-get install oracle-java8-installer</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> java -version #check the version of jdk</span><br></pre></td></tr></table></figure><h2 id="2-Install-Hadoop"><a href="#2-Install-Hadoop" class="headerlink" title="2.Install Hadoop"></a>2.Install Hadoop</h2><p>Find the version of Hadoop you want to install from <a href="http://hadoop.apache.org/releases.html" target="_blank" rel="noopener">Apache Hadoop Releases page</a> and select the binary file and copy its link, then use shell to install as follow(here we choose the 3.2.0 for example):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> wget https://www-eu.apache.org/dist/hadoop/common/hadoop-3.2.0/hadoop-3.2.0.tar.gz</span><br></pre></td></tr></table></figure><p>Then extract the file and move it to /usr/local  directory</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tar -xzvf hadoop-3.2.0.tar.gz</span><br><span class="line"><span class="meta">$</span> sudo mv hadoop-3.2.0 /usr/local/hadoop</span><br></pre></td></tr></table></figure><h2 id="3-Configuring-Hadoop’s-Java-Home"><a href="#3-Configuring-Hadoop’s-Java-Home" class="headerlink" title="3.Configuring Hadoop’s Java Home"></a>3.Configuring Hadoop’s Java Home</h2><p>Check the default Java path using following shell:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> readlink -f /usr/bin/java | sed "s:bin/java::"</span><br></pre></td></tr></table></figure><p>Then to configure the Hadoop environment by edit the <code>Hadoop-env.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo nano /usr/local/hadoop/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure><p>You could use vim if you familiar with vim to edit.</p><p>Then modify this file in one of the following options:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># two options both add one line after </span></span><br><span class="line"><span class="comment"># export JAVA_HOME=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># method 1:set static value</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-8-oracle/jre/</span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2: set dynamic value</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=$(readlink -f /usr/bin/java | sed <span class="string">"s:bin/java::"</span>)</span><br></pre></td></tr></table></figure><h2 id="4-Runing-Hadoop"><a href="#4-Runing-Hadoop" class="headerlink" title="4.Runing Hadoop"></a>4.Runing Hadoop</h2><p>Now we should be able to run Hadoop:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /usr/<span class="built_in">local</span>/hadoop/bin/hadoop</span></span><br></pre></td></tr></table></figure><p>Or you can add hadoop to your <code>PATH</code> to easily run by editing the profile </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo nano /etc/profile</span></span><br></pre></td></tr></table></figure><p>Add one line at the end of this file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/hadoop/bin</span><br></pre></td></tr></table></figure><p>Then save and exit, then run following shell to make this file take effect</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This tutorial is to build a single node Hadoop platform on a ubuntu vm.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cloud Computing" scheme="http://yoursite.com/tags/Cloud-Computing/"/>
    
  </entry>
  
</feed>
